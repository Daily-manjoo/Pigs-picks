// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int       @id @default(autoincrement()) //자동으로 1씩 늘어나게
  email         String    @unique //중복되지 않도록
  name          String? //네이버 로그인 api는 name이 없음
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  likes         Like[]
}

model Store {
  id              Int     @id @default(autoincrement()) //자동으로 1씩 늘어나게
  phone           String? // tel_no
  address         String? //rdn_code_nm
  lat             String? //y_dnts
  lng             String? //x_cnts
  name            String? //upso_nm
  category        String? //bizcnd_code_nm
  storeType       String? //cob_code_nm
  foodCertifyName String? //crtfc_gbn_nm
  likes           Like[]
}

model Like {
  id              Int @id @default(autoincrement())
  createAt        DateTime @default(now()) //현재 날짜와 시간을 기본으로 설정
  storeId         Int
  userId          Int
  //스토어와 유저의 찜 관계
  store           Store @relation(fields: [storeId], references: [id], onDelete: Cascade) //onDelete: store나 user가 사라지면 찜도 삭제
  user            User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId, storeId])
}

model Account {
  id                        String  @id @default(cuid())
  userId                    Int
  type                      String
  provider                  String
  providerAccountId         String
  refresh_token             String? @db.Text
  refresh_token_expires_int Int?
  access_token              String? @db.Text
  expires_at                Int?
  token_type                String?
  scope                     String?
  id_token                  String? @db.Text
  session_state             String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
